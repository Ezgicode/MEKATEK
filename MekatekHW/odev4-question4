def word_search(board, words):
    def dfs(i, j, k, visited):
        if not (0 <= i < m) or not (0 <= j < n) or visited[i][j] or board[i][j] != words[k]:
            return False

        if k == len(words) - 1:
            return True

        visited[i][j] = True

        # Yatay ve dikey komşuları kontrol et
        if (dfs(i + 1, j, k + 1, visited) or
                dfs(i - 1, j, k + 1, visited) or
                dfs(i, j + 1, k + 1, visited) or
                dfs(i, j - 1, k + 1, visited)):
            return True

        visited[i][j] = False

        return False

    m, n = len(board), len(board[0])
    result = []

    for word in words:
        if len(word) > 10:
            continue

        found = False
        visited = [[False] * n for _ in range(m)]

        # Her hücrede başlayarak kelimeyi ara
        for i in range(m):
            for j in range(n):
                if dfs(i, j, 0, visited):
                    found = True
                    break

            if found:
                break

        if found:
            result.append(word)

    return result

# Örnek kullanım
board = [
    ['o', 'a', 'a', 'n'],
    ['e', 't', 'a', 'e'],
    ['i', 'h', 'k', 'r'],
    ['i', 'f', 'l', 'v']
]
words = ["oath", "pea", "eat", "rain", "eatrain", "invalidwordtoolongforthisproblem"]

result = word_search(board, words)
print(result)
